# by mrqwas

import logging
import os
import time
import threading

import requests
from dotenv import load_dotenv
from telebot import TeleBot, types


load_dotenv()

# Tokens
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
ENDPOINT = os.getenv('ENDPOINT')
ENV_VARS = ('TELEGRAM_TOKEN', 'ENDPOINT')

# Numerical Constants
CUT_JOKE_LEFT = 12
CUT_JOKE_RIGHT = -2
MINUTE = 60
DEFAULT_PERIOD = 5

# Button Texts
JOKE_BUTTON = 'ü§° - –ê–Ω–µ–∫–¥–æ—Ç'
START_NONSTOP_BUTTON = 'üó£Ô∏è - –í–∫–ª—é—á–∏—Ç—å –Ω–æ–Ω—Å—Ç–æ–ø'
STOP_NONSTOP_BUTTON = '‚úã - –í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–Ω—Å—Ç–æ–ø'
DOCUMENTATION_BUTTON = 'üìÉ - –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é'

# Normal command text
DOCUMENTATION = (
    '–ê–Ω–¥–µ–∫–¥–æ—Ç—ã4–∏ - —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.\n'
    '–ê–Ω–µ–∫–¥–æ—Ç—ã –±–µ—Ä—É—Ç—Å—è —Å —Å–∞–π—Ç–∞ http://rzhunemogu.ru/. –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–ø–∏ :3\n'
    '–ê–≤—Ç–æ—Ä - @mrqwas - —Å—ã–Ω –≥–µ–Ω–µ—Ä–∞–ª–∞-–º–∞–π–æ—Ä–∞ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—ã, '
    '—Ç–∞–∫ —á—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±–æ—Ç–∞ –±–µ–∑ –µ–≥–æ –≤–µ–¥–æ–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.\n'
    '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤ –±–æ—Ç–µ —Å–ª–æ–º–∞–ª–æ—Å—å - —Å–º–µ–ª–æ –ø–∏—à–∏—Ç–µ –µ–º—É.\n'
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
    '/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
    '/anekdot (–∫–Ω–æ–ø–∫–∞ "ü§° - –ê–Ω–µ–∫–¥–æ—Ç") - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç\n'
    '/nonstop (–∫–Ω–æ–ø–∫–∞ "üó£Ô∏è - –í–∫–ª—é—á–∏—Ç—å –Ω–æ–Ω—Å—Ç–æ–ø") - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é'
    '–æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–µ–∫–¥–æ—Ç–æ–≤. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å'
    ' (/period) –∏ –ª–∏–º–∏—Ç (/limit).\n'
    '/stop (–∫–Ω–æ–ø–∫–∞ "‚úã - –í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–Ω—Å—Ç–æ–ø") - '
    '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n'
    '/docs (–∫–Ω–æ–ø–∫–∞ "üìÉ - –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é") - '
    '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫ –±–æ—Ç—É (—ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç)\n'
    '/period - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. '
    '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 2 —á–∞—Å–∞.'
    '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–µ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ '
    '–≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –í –ú–ò–ù–£–¢–ê–•!!!\n'
    '–í—Ä–æ–¥–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª, –µ—Å–ª–∏ —á—Ç–æ - –ø–∏—à–∏—Ç–µ @mrqwas.\n'
    '¬©mrqwas. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã')

GREETING_TEXT = (
    '–ü—Ä–∏–≤–µ—Ç, {name}. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞–∂–º–∏ /docs '
    '—á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏')
NONSTOP_TEXT = (
    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞.'
    '–ù–∞–∂–º–∏—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏')
STOP_BOT_TEXT = (
    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.'
    '–ù–∞–∂–º–∏—Ç–µ /nonstop —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞')
ASK_FOR_PERIOD_TEXT = (
    '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö. '
    '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {period} –º–∏–Ω—É—Ç.\n'
    '–ù–∞–∂–º–∏—Ç–µ /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞.')
SET_PERIOD_DONE = '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥: {mins} –º–∏–Ω—É—Ç.'
SUCCESS = '–£—Å–ø–µ—à–Ω–æ'

# Error text
CHECK_VARS_CRITICAL = '–û—Ç—Å—É—Ç—Å–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ {vars}'
GET_JOKE_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API {error}'
SEND_MESSAGE_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {msg}: {error}'
STOP_BOT_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {error}'
SET_PERIOD_ERROR = '–û—à–∏–±–∫–∞ {e}. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö'

# Some vars are needed
bot = TeleBot(token=TELEGRAM_TOKEN)
current_period = DEFAULT_PERIOD
stop_sending = threading.Event()


@bot.message_handler(func=lambda msg: msg.text == STOP_NONSTOP_BUTTON)
def handle_stop_nonstop(message):
    """Handler for stop nonstop button."""
    stop_bot(message)


@bot.message_handler(func=lambda msg: msg.text == START_NONSTOP_BUTTON)
def handle_nonstop(message):
    """Handler for nonstop button."""
    nonstop(message)


@bot.message_handler(func=lambda msg: msg.text == JOKE_BUTTON)
def handle_joke(message):
    """Handler for send joke button."""
    send_joke(message)


@bot.message_handler(func=lambda msg: msg.text == DOCUMENTATION_BUTTON)
def handle_documentation(message):
    """Handler for documentation button."""
    documentation(message)


def check_vars():
    """Checking env variables for availability."""
    missing_vars = [name for name in ENV_VARS if not globals()[name]]
    if missing_vars:
        error_msg = CHECK_VARS_CRITICAL.format(vars=missing_vars)
        logging.critical(error_msg)
        raise RuntimeError(error_msg)


def get_joke():
    """Get joke from API."""
    try:
        response = requests.get(ENDPOINT)
        response.raise_for_status()
        return rf'{response.text}'[CUT_JOKE_LEFT:CUT_JOKE_RIGHT]
    except requests.RequestException as e:
        raise ConnectionError(GET_JOKE_ERROR.format(error=e))


@bot.message_handler(commands=['anekdot'])
def send_joke(message):
    """Send a joke in telegram chat."""
    try:
        joke = get_joke()
        bot.send_message(
            chat_id=message.chat.id,
            text=joke)
    except Exception as e:
        logging.exception(SEND_MESSAGE_ERROR.format(msg=joke, error=e))
        raise e


@bot.message_handler(commands=['start'])
def start_bot(message):
    """Keyboard configs and greeting."""
    chat = message.chat
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(JOKE_BUTTON))
    keyboard.add(types.KeyboardButton(START_NONSTOP_BUTTON))
    keyboard.add(types.KeyboardButton(STOP_NONSTOP_BUTTON))
    keyboard.add(types.KeyboardButton(DOCUMENTATION_BUTTON))
    bot.send_message(
        chat_id=chat.id,
        text=GREETING_TEXT.format(
            name=chat.first_name),
        reply_markup=keyboard)


@bot.message_handler(commands=['nonstop'])
def nonstop(message):
    """Auto-sending jokes."""
    stop_sending.clear()

    def send_periodic():
        while not stop_sending.is_set():
            send_joke(message)
            time.sleep(current_period)

    threading.Thread(target=send_periodic, daemon=True).start()


@bot.message_handler(commands=['docs'])
def documentation(message):
    """Shows a documentation."""
    bot.send_message(
        chat_id=message.chat.id,
        text=DOCUMENTATION)


@bot.message_handler(commands=['stop'])
def stop_bot(message):
    """Stops sending jokes."""
    try:
        stop_sending.set()
        bot.send_message(
            chat_id=message.chat.id,
            text=STOP_BOT_TEXT,
        )
        logging.debug(STOP_BOT_TEXT)
        return True
    except Exception as e:
        logging.exception(STOP_BOT_ERROR.format(error=e))
        raise e


@bot.message_handler(commands=['period'])
def ask_for_period(message):
    """Asking user for auto-sending jokes period."""
    bot.send_message(message.chat.id, ASK_FOR_PERIOD_TEXT.format(
        period=current_period / MINUTE
    ))
    bot.register_next_step_handler(message, set_period)


def set_period(message):
    """Set a period for auto-sending jokes."""
    global current_period
    try:
        text = message.text
        chat_id = message.chat.id
        if text != '/exit':
            input_mins = float(text)
            bot.send_message(chat_id, SET_PERIOD_DONE.format(mins=input_mins))
            current_period = input_mins * MINUTE
        else:
            bot.send_message(chat_id, SUCCESS)
            current_period = DEFAULT_PERIOD
    except ValueError as e:
        bot.send_message(message.chat.id, SET_PERIOD_ERROR.format(e=e))
        bot.register_next_step_handler(message, set_period)


if __name__ == '__main__':
    logging.basicConfig(
        level=logging.DEBUG,
        filename=f'{__file__}.log',
        encoding='utf-8',
        format='%(asctime)s %(funcName)s %(levelname)s %(message)s'
    )
    check_vars()
    bot.polling(non_stop=True)
